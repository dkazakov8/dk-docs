stages:
  - build
  - deploy

build:
  # Use the official docker image.
  image: docker:20.10.16
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" --build-arg GIT_COMMIT="$CI_COMMIT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
  tags:
    - frontend

deploy:
  image: docker:20.10.16
  stage: deploy
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull "$CI_REGISTRY_IMAGE${tag}"
  script:
    - docker ps -f name=fportal -q | grep -q . && docker rm fportal -f
    - docker run -d --name fportal --restart always
      -p '400:400'
      --env API_HOST=http://10.16.52.80:8001
      --env API_HOST_SERVER=http://10.16.52.80:8001
      "$CI_REGISTRY_IMAGE${tag}"
  when: manual
  tags:
    - frontend
